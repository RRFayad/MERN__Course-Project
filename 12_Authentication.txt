Main Goals:
    - Setu Up Authentication
    - Set Up Authorization

How Should it Work
    - The server generates a Token, which can be stored in the FrontEnd in a Cookie or Local Storage
        * Traditionally (HTML rendered from the server) we use Session and sessoin Id (cookie)
    
Main Steps:
    
    1. Set the JwT Up
        A. Hash the Password (bcrypt)
            a. install bcrypt
            b. Set bcrypt for the sign up and for the login
        
        B. Generate JWT in the Backend (jsonwebtoken)
            a. install and set up the controllers (again sign up and login)
        
        C. Create and Add the middleware for token verification
            * We set to token to be checked in the Header (as it's metaData and not every req has body)

        D. Set Up Front End for thw JWT
            - Handle the token
                (also we don't need to handle the loggedIn staate anymore, it's just a !!token)
    
    2. Authorization
        * The problem is, anyone with the right data (placeId and any token) could delete or edit any place (not only his own).
            * That's why we have to set an authorization middleware;
        
        - Add userData in the token (check-auth MW)
            - Add userData verification FROM the token in the controller (check update-places)

    3. Manage Token in The Browser
        - Add Local Storage Logic for Logging In and Out
        - Manage the Token Expiration
            * and set autoLogout (useEffect and expirationTime)
        
    
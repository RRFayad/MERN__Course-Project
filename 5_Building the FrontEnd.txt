39. Module Introduction

    - Create our SPA
    - Add Routing
    - Split into Core Components
    - Manage UI Components + CSS Styling

40. Starting Setup, Pages & Routes

    - Folders Strucutute:
        - A folder per feature (*places and users in our case)
            - Each one containing a folder for pages and another for components
        - A folder for shared components
    
    - As Max have already planned the pages, he likes to start with the pages folder

    Steps.:
        1. Install the Router
            npm install --save react-router-dom@5 --save-exact
        2. Organize the Pages Components
        3. Organize the App as a Router, with the pages components
            a. import { BrowserRouter as Router, Route, Redirect, Switch } from "react-router-dom";
                * Router is for the 'ROuter system';
                * Route for each Route
                * Redirect for redirecting
                * Switch Is to make sure we only redirect when we do not find a path
     
            <Router>
                <Switch>
                    <Route path="/" exact>
                    <Users />
                    </Route>
                    <Route path="/places/new" exact>
                    <NewPlace />
                    </Route>
                    <Redirect to="/" />
                </Switch>
            </Router>

41. Adding a UsersList Page / Component

    * We want to start in the Users page, which will bringing all users list
        * We 1st worked more in the UsersList logic, setting the main data we want and to be returned with a ul of UserItem 's
        * And the we created the dummy data that will test our component

 43. Styling our App & More Components
    
    * We styles and creted the UI Elements

    * Remembered the Link from React-Router-Dom

44. Presentational vs Stateful Components

    - Theory:
        - We have presentational
            * Dumb components, that only works in the presentation of some data
        - We have stateful components
            * Components with logic to process data

45. Adding a Main Header

    * props.children

    * Check the Main Navigation.css .main-navigation__menu-btn for the sandwich menu

46. Adding Navlinks

    NavLink - Link for navigation (which gets active when in the page and hover, for example)
        * In the styles, it's an anchor tag

47. Implementing a Basic Desktop & Mobile Navigation & 48. React Portals

    - For sidedwrawers or Modals we shoudl use portals
        * As it will be 'over' or 'above' our HTML content, then it should become before our root div in the index.html

    - Portal review:
            1. Go to public/index.HTML
            2. Create above the root div the div I want for my portal, and name it with the id we want
            3. In the component file I have the modal:
                - import ReactDOM from 'react-dom';
                // React DOM is the library responsible for converting the JSX (react) code into DOM
            4. return ReactDOM.createPortal(JSX Element, pointer to the div I created)
                - I pass a render JSX code 
                - The div I created on step 2 (using DOM)
                    i.e.
                    {ReactDOM.createPortal(<Backdrop onConfirm={props.onConfirm}/>, document.querySelector('#backdrop-root'))}

50. Animating the Sidedrawer

    - npm install --save react-transition-group

    - import { CSSTransition } from "react-transition-group";

    * All these attributes are from the library;
    * check slide-in-left class in Index.css
        <CSSTransition
            in={props.show}
            timeout={200}
            classNames="slide-in-left"
            mountOnEnter
            unmountOnExit
        >
            other components here
        </CSSTransition>

51. Rendering User Places & Using Dynamic Route Segments & 52. Getting Route Params

    - We set the places page and routes, now we need to sort the places by the user
        * useParams o get the dynamic id

53. Adding Custom Buttons

    * Max shared a file with a customizabel Button component

54. Adding a Modal

    *We are going to create a reusable modal (in out 1st case for a map)

55. Rendering a Map with Google Maps
    * If we google it, we will find a lot of React Maps Renderization libraries
        * But we will make our own instead
        * Look for Google Maps SDK (Software Development Kit)


    * We did not use Max' Map component

    !* About useEffect:
        It runs after the renderization
            In our case it was useful for the binding with the useRef value

58. Adding a Custom Form Input Component

    * As we are going to build the backend, it makes no sense yet to develop a whole logic for adding new places and updating our list of places in the front end
        * As it would be too much work for managing states only in the browser

    * Side Note: Check out how can be useful these shared components Max does, as this customizable Input

59. Managing State in the Input Component (useReducer)

    - We want to structure customizable validation logic to the input

    * useReducer - used to manage more complex state, or interconnected states
    * https://www.youtube.com/watch?v=g_Czl_SrhQU
        * remembering theorically:
              const [state, dispatch] = useReducer(reducerFunction, initialStateValue);
              
            1. Create the reducerFunction (should be outside the component)
                - Which will receive 2 args: state, and action
                    * action.type will be whic logic we will render to the reducer
                        e.g.: it could be 'INCREMENT' or 'DECREMENT' to set up a counter logic
            
            2. Set the hook:
                const [state, dispatch] = useReducer(reducerFunction, initialStateValue);

            3. When I want to update the state, I simply call dispatch, with my action as the argument
                * It will call the reducer function, the the state and the action
                    * Which by the way, will handle the state update from the action I provided

60. Adding Input Validation

    * Check out validators Max gave us

    - Set the logic with the validation file, and updated the UX to recognize if the user has touched the form before returning error
        * In order to the user do not see an error before starting filling the form

61. Sharing Input Values & Adding Multiple Inputs
    
    !* As we bind the props that Input receives for the NewPlace, including a function, we need to use useCallback (in the component the function is created) to avoid infinite loops
        * Remembering that for each re-render, the whole component functions is reconstructed, and useCallback would memoize the function to not be recreated

63. Finishing the "Add Place" Form

    * Notice how easy was to implement a new input in the form, with all the validity logic as it's componentized

64. Starting Work on the 'Update Place' Page

    - We are going to make the fomr and the input component even more customizable

65. Adjusting the Input Component
    * We want to add option for initial values and validity

    ** To make the whole form more customizable, we will create a custom hook

66. Creating a Custom Form Hook (useForm)

    * custom hooks uses stateful logics
    
    * Created a stateful logic to componentize the whole form (of new place and update place)

68. Adjusting the Form Hook

    - Right now, our logic only handles syncronous code (as it's a dummy array)
        * Hooks can not work inside a then, or if etc, only directly in the component function

    - Then we create a way to the form initialize with empty value and false validations, and then be set with the fetched data
        * There's no fetching data yet, but ok

39. Module Introduction

    - Create our SPA
    - Add Routing
    - Split into Core Components
    - Manage UI Components + CSS Styling

40. Starting Setup, Pages & Routes

    - Folders Strucutute:
        - A folder per feature (*places and users in our case)
            - Each one containing a folder for pages and another for components
        - A folder for shared components
    
    - As Max have already planned the pages, he likes to start with the pages folder

    Steps.:
        1. Install the Router
            npm install --save react-router-dom@5 --save-exact
        2. Organize the Pages Components
        3. Organize the App as a Router, with the pages components
            a. import { BrowserRouter as Router, Route, Redirect, Switch } from "react-router-dom";
                * Router is for the 'ROuter system';
                * Route for each Route
                * Redirect for redirecting
                * Switch Is to make sure we only redirect when we do not find a path
     
            <Router>
                <Switch>
                    <Route path="/" exact>
                    <Users />
                    </Route>
                    <Route path="/places/new" exact>
                    <NewPlace />
                    </Route>
                    <Redirect to="/" />
                </Switch>
            </Router>

41. Adding a UsersList Page / Component

    * We want to start in the Users page, which will bringing all users list
        * We 1st worked more in the UsersList logic, setting the main data we want and to be returned with a ul of UserItem 's
        * And the we created the dummy data that will test our component

 43. Styling our App & More Components
    
    * We styles and creted the UI Elements

    * Remembered the Link from React-Router-Dom

44. Presentational vs Stateful Components

    - Theory:
        - We have presentational
            * Dumb components, that only works in the presentation of some data
        - We have stateful components
            * Components with logic to process data

45. Adding a Main Header

    * props.children

    * Check the Main Navigation.css .main-navigation__menu-btn for the sandwich menu

46. Adding Navlinks

    NavLink - Link for navigation (which gets active when in the page and hover, for example)
        * In the styles, it's an anchor tag


123. Module Introduction
    - Defining Mongoose Models

    - CRUD Operations

    - Connecting Places & Users (Relations)

Steps:
    Work in the places controllers:

    1. Install Mongoose & Connect it our Backend to MongoDB 
        
        - npm install --save mongoose

        - Import it in the app

    2. Create the Models

        * Mongo DB => Collections => Documents
        * Mongoose => Schema (blueprint of a document) => Model (each instance will generate a new document)
            ** npm install mongoose-unique-validator        - for checking unique property

    3. Develop the CRUD Logic - The Controller

        - Create: 
            - createPlace Logic
                - Nothing new, used the Model to instancing the new Place, and the save(), that comes from mongoose

        - Read:
            - getPlaceById Logic 
            - getPlacesByUserId
                * note the return toObject({getters:true})
            
        - Update:
            - Actually, exactly the same as Read and the Create (save())

        - Delete
            - Nothing new here, but the deleteOne()


    4. Work in Users

        - User Model
            * Treated this separetedly because it has its own observations:

            - npm install --save mongoose-unique-validator
                * To ensure i a efficient way that there will be not duplicate e-mail on the DB
            
        - Controllers
            - Signup
            - Login
            - Getting Users
                * Important: We can do this to exclude the password:
                   const users =await User.find({}, "-password");
        
        - Relations (between places and users)

            - Adding a new Place (and referring it to the user)
                * 1 place belongs to 1 user, and 1 user can create multiple places

                - In the place Schema:
                    creator: { type: mongoose.Types.ObjectId, required: true, ref: "User" },
                
                - In the user Schema:
                    places: [{ type: mongoose.Types.ObjectId, required: true, ref: "Place" }],

        
                    * Right now, it will not be the final approach as we need to create the authentication yet

                - In the place controller (check createPlace):
                    - We will have two indepent tasks, that must succeed:
                        - Store or create the new Place
                        - add the palceId to the correspondent user

                    - If any of the operations fail, we want to cancel everything
                        - So, we need sessions and transactions
                            - Transactions allow us to perform multiple operations in isolation and to undo these
                            - Transactions are built on sessions

                        
                        - IMPORTANT: If there's no collection yet, we will have to create it manually, in a session it's not automatically created!
            
            - Deleting a Place (also from the user Reference)
                - We used populate to get access to the content of the document stored in other collection (access the User doc from the Place)
                - Same as the createPlace, with session and transaction
                - instead of push, we used pull for the reference in the array

            * Also showed populate approach from getting places from userId


        




    





